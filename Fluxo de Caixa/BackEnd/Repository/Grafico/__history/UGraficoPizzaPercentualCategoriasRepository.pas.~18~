unit UGraficoPizzaPercentualCategoriasRepository;

interface

uses
  UBaseRepository, FireDAC.Comp.Client, FireDAC.Phys.PG, FireDAC.Stan.Param,
  FireDAC.Phys.PGDef, System.Generics.Collections,
  System.SysUtils, System.Variants, UGraficoPizzaPercentualCategorias;

type
  TGraficoPizzaPercentualCategoriasRepository = class

  private
    FDQuery: TFDQuery;
    FBaseRepository: TBaseRepository;
  public
    constructor Create(ABaseRepository: TBaseRepository);
    function ListarDadosDeCategoria(): TList<TGraficoPizzaPercentualCategorias>;
    function ListarUltimosLancamentosPorCategoria()
      : TList<TGraficoPizzaPercentualCategorias>;
  end;

implementation

constructor TGraficoPizzaPercentualCategoriasRepository.Create(ABaseRepository
  : TBaseRepository);
begin
  FBaseRepository := ABaseRepository;
  FDQuery := TFDQuery.Create(nil);
  FDQuery.Connection := FBaseRepository.Connection;
end;

function TGraficoPizzaPercentualCategoriasRepository.
  ListarUltimosLancamentosPorCategoria()
  : TList<TGraficoPizzaPercentualCategorias>;
var
  Categoria: TGraficoPizzaPercentualCategorias;
begin
  if FDQuery = nil then
  begin

  end;
  Result := TList<TGraficoPizzaPercentualCategorias>.Create;
end;

function TGraficoPizzaPercentualCategoriasRepository.ListarDadosDeCategoria()
  : TList<TGraficoPizzaPercentualCategorias>;
var
  Categoria: TGraficoPizzaPercentualCategorias;
begin
  if FDQuery = nil then
  begin
    raise Exception.Create('Erro: FDQuery não foi instanciado.');
  end;

  Result := TList<TGraficoPizzaPercentualCategorias>.Create;
  FDQuery.SQL.Text := 'SELECT ' + 'c.nome_categoria AS categoria, ' + 'f.tipo, '
    + 'p.nome_pagamento, ' + 'SUM(f.valor) AS total ' +
    'FROM fin.fluxo_caixa f ' +
    'JOIN fin.categorias c ON f.categoria_id = c.id ' +
    'JOIN fin.tipos_pagamento p ON f.tipo_pagamento_id = p.id ' +
    'GROUP BY c.nome_categoria, f.tipo, p.nome_pagamento ' +
    'ORDER BY total DESC;';
  FDQuery.Open;

  while not FDQuery.Eof do
  begin
    try
      Categoria := TGraficoPizzaPercentualCategorias.Create
        (FDQuery.FieldByName('categoria').AsString, FDQuery.FieldByName('tipo')
        .AsString, FDQuery.FieldByName('nome_pagamento').AsString,
        FDQuery.FieldByName('total').AsFloat);

      Result.Add(Categoria);
    Except
      Categoria.Free;
      raise
    end;
    FDQuery.Next;
  end;
end;

end.
