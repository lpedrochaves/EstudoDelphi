unit ULoginController;

interface

uses
  ULoginService, UBaseRepository, UUsuarioRepository, Generics.Collections,
  UUsuario;

type

  TLoginController = class
  private
    FBaseRepository: TBaseRepository;
    FUsuarioRepository: TUsuarioRepository;
    FLoginService: TLoginService;
  public
    constructor Create;
    destructor Destroy; override;
    function AutenticarSemMensagem(AUsuario: string; ASenha: string): Boolean;
    function ListarUsuarios(): TList<TUsuario>;
  end;

implementation

constructor TLoginController.Create;
begin
  inherited Create;
  FBaseRepository := TBaseRepository.Create;
  FUsuarioRepository := TUsuarioRepository.Create(FBaseRepository);
  FLoginService := TLoginService.Create(FUsuarioRepository);
end;

destructor TLoginController.Destroy;
begin
  FLoginService.Free;
  FUsuarioRepository.Free;
  FBaseRepository.Free;
  inherited;
end;

function TLoginController.AutenticarSemMensagem(AUsuario,
  ASenha: string): Boolean;
begin
  Result := FLoginService.FazerLogin(AUsuario, ASenha);
end;

function TLoginController.ListarUsuarios: TList<TUsuario>;
begin
  Result := FLoginService.ListarTodos();
end;

//function TLoginController.AutenticarSemMensagem(AUsuario,
//  ASenha: string): Boolean;
//var
//  BaseRepository: TBaseRepository;
//  UsuarioRepository: TUsuarioRepository;
//  LoginService: TLoginService;
//
//  Logado: Boolean;
//begin
//  try
//    BaseRepository := TBaseRepository.Create;
//    try
//      UsuarioRepository := TUsuarioRepository.Create(BaseRepository);
//      try
//        LoginService := TLoginService.Create(UsuarioRepository);
//        Logado := LoginService.FazerLogin(AUsuario, ASenha);
//        Result := Logado;
//      finally
//        LoginService.Free;
//      end;
//    finally
//      UsuarioRepository.Free;
//    end;
//  finally
//    BaseRepository.Free;
//  end;
//end;
//
//function TLoginController.ListarUsuarios: TList<TUsuario>;
//var
//  BaseRepository: TBaseRepository;
//  UsuarioRepository: TUsuarioRepository;
//  LoginService: TLoginService;
//begin
//  try
//    BaseRepository := TBaseRepository.Create;
//    try
//      UsuarioRepository := TUsuarioRepository.Create(BaseRepository);
//      try
//        LoginService := TLoginService.Create(UsuarioRepository);
//        Result := LoginService.ListarTodos();
//      finally
//        LoginService.Free;
//      end;
//    finally
//      UsuarioRepository.Free;
//    end;
//  finally
//    BaseRepository.Free;
//  end;
//end;

end.
