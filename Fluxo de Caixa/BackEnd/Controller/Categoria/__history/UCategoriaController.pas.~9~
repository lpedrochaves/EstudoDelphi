unit UCategoriaController;

interface

uses
  UBaseRepository, UCategoriaRepository, UCategoriaService,
  Generics.Collections, System.SysUtils, UCategoriaModel, FireDAC.Comp.Client;

type
  TCategoriaController = class
  private
    FCategoriaService: TCategoriaService;
    FBaseRepository: TBaseRepository;
    FCategoriaRepository: TCategoriaRepository;
  public
    constructor Create();
    destructor Destroy; override;
    function FindAll(): TList<TCategoriaModel>;
    function GetDataSetAll: TFDQuery;
  end;

implementation

{ TCategoriaController }

constructor TCategoriaController.Create;
begin
  inherited Create;
  FBaseRepository := TBaseRepository.Create;
  FCategoriaRepository := TCategoriaRepository.Create(FBaseRepository);
  FCategoriaService := TCategoriaService.Create(FCategoriaRepository);
end;

destructor TCategoriaController.Destroy;
begin
  inherited;
  FBaseRepository.Free;
  FCategoriaRepository.Free;
  FCategoriaService.Free;
end;

function TCategoriaController.FindAll: TList<TCategoriaModel>;
var
  Categorias: TList<TCategoriaModel>;
  BaseRepository: TBaseRepository;
  CategoriaRepository: TCategoriaRepository;
  CategoriaService: TCategoriaService;
begin

  Result := nil;
  BaseRepository := TBaseRepository.Create();

  try
    CategoriaRepository := TCategoriaRepository.Create(BaseRepository);
    try
      CategoriaService := TCategoriaService.Create(CategoriaRepository);
      try
        Result := CategoriaService.ListarTodas();
      finally
        CategoriaService.Free;
      end;
    finally
      CategoriaRepository.Free;
    end;
  finally
    BaseRepository.Free;
  end;

end;

// TESTANDO METODO PARA UTILIZAR O DB GRID COM GPT
function TCategoriaController.GetDataSetAll: TFDQuery;
var
  BaseRepository: TBaseRepository;
  CategoriaRepository: TCategoriaRepository;
  CategoriaService: TCategoriaService;
begin
  BaseRepository := TBaseRepository.Create;
  try
    CategoriaRepository := TCategoriaRepository.Create(BaseRepository);
    try
      CategoriaService := TCategoriaService.Create(CategoriaRepository);
      try
        Result := CategoriaService.GetDataSetAll;
      finally
        // Não dá Free aqui, pois vamos usar o DataSet retornado!
      end;
    finally
      // idem
    end;
  finally
    // idem
  end;
end;

end.
