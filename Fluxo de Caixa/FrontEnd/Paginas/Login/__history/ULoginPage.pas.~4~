unit ULoginPage;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls,
  UBaseRepository, Generics.Collections,
  UDataBaseConfig, UUsuario, UUsuarioRepository,
  ULoginController;

type
  TfrmLogin = class(TForm)
    Label1: TLabel;
    Label2: TLabel;
    lblLoginVazioInvalido: TLabel;
    lblSenhaVaziaInvalida: TLabel;
    lblUsuarioSenhaIncorreto: TLabel;
    pnlEdtitSenha: TPanel;
    edtSenha: TEdit;
    pnlEditLogin: TPanel;
    edtLogin: TEdit;
    btnEntrarMvc: TButton;
    btnEntrar: TButton;
  private
    { Private declarations }
  public
    { Public declarations }
    function ValidarCampos(ALogin, Asenha: String): Boolean;
  end;

var
  frmLogin: TfrmLogin;

implementation

{$R *.dfm}

function TfrmLogin.ValidarCampos(ALogin, Asenha: String): Boolean;
var
  i: Integer;
  CampoInvalido: Boolean;
  Usuario: TUsuario;
  ListaUsuarios: TList<TUsuario>;
  UsuarioController: TLoginController;
begin

  CampoInvalido := False;
  ListaUsuarios := TList<TUsuario>.Create;
  UsuarioController := TLoginController.Create;
  ListaUsuarios := UsuarioController.ListarUsuarios();

  // Percorre todos os componentes do formulário
  for i := 0 to ComponentCount - 1 do
  begin
    if Components[i] is TEdit then
    begin
      with TEdit(Components[i]) do
      begin
        if (Trim(ALogin) = '') and (Trim(Asenha) <> '') then
        // Login
        begin
          lblLoginVazioInvalido.Visible := True;
          lblLoginVazioInvalido.Font.Color := clRed;
          lblLoginVazioInvalido.Caption :=
            'Campo Usuário não pode ficar em branco!';
          Align := alTop;
          Height := 39;
          CampoInvalido := True;
          Result := False;

        end
        else if (Trim(ALogin) <> '') and (Trim(Asenha) = '') then
        begin
          // Senha
          lblSenhaVaziaInvalida.Visible := True;
          lblSenhaVaziaInvalida.Font.Color := clRed;
          lblSenhaVaziaInvalida.Caption :=
            'Campo Senha não pode ficar em branco!';
          Align := alTop;
          Height := 39;
          CampoInvalido := True;
          Result := False;

        end
        else if (Trim(ALogin) = '') and (Trim(Asenha) = '') then
        begin
          // Login
          lblLoginVazioInvalido.Visible := True;
          lblLoginVazioInvalido.Font.Color := clRed;
          lblLoginVazioInvalido.Caption :=
            'Campo Usuário não pode ficar em branco!';
          // Senha
          lblSenhaVaziaInvalida.Visible := True;
          lblSenhaVaziaInvalida.Font.Color := clRed;
          lblSenhaVaziaInvalida.Caption :=
            'Campo Senha não pode ficar em branco!';
          Align := alTop;
          Height := 39;
          CampoInvalido := True;
          Result := False;

        end
        else
        begin
          Align := alClient;
          Height := 41;
          Color := clWindow; // Cor padrão de volta
          Font.Color := clBlack;
          Result := True;

        end;

        // TESTANDO VALIDAÇÃO NO BANCO
        if (Trim(ALogin) <> '') or (Trim(Asenha) <> '') then
        begin
          for Usuario in ListaUsuarios do
          begin
            if (Trim(ALogin) <> Usuario.Nome) or (Trim(Asenha) = Usuario.Senha)
            then
            begin
              lblUsuarioSenhaIncorreto.Visible := True;
              lblUsuarioSenhaIncorreto.Font.Color := clRed;
              lblUsuarioSenhaIncorreto.Caption :=
                'Usuário ou Senha Incorretos!';
              Align := alTop;
              Height := 39;
              CampoInvalido := True;
              Result := False;
            end
          end;
        end;
        // FIM TESTE
      end;

    end;
  end;
end;

end.
